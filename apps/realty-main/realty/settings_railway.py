"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ Django settings –¢–û–õ–¨–ö–û –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
–í–µ—Ä—Å–∏—è: Railway MVP Auth Only
"""
import os
from pathlib import Path

# Build paths
BASE_DIR = Path(__file__).resolve().parent.parent

# Security
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-auth-only-key-12345')
DEBUG = True
ALLOWED_HOSTS = ['*']

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¢–û–õ–¨–ö–û –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
]

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π middleware
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
]

ROOT_URLCONF = 'realty.urls_simple'

# Templates –¥–ª—è Django admin
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'realty.wsgi.application'

# Database - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Å PostgreSQL
import dj_database_url

_db_url = os.environ.get('DATABASE_URL')
if _db_url:
    DATABASES = {
        'default': dj_database_url.parse(_db_url, conn_max_age=600),
    }
else:
    # Fallback –∫ SQLite –µ—Å–ª–∏ PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'auth.sqlite3',
        }
    }

# Cache –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - Redis –¥–ª—è Railway, –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
REDIS_URL = os.environ.get('REDIS_URL')
if REDIS_URL:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }
    print(f"üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω Redis –∫—ç—à: {REDIS_URL}")
else:
    # Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫—ç—à—É
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        }
    }
    print(f"üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à (fallback)")

# REST Framework –¥–ª—è JWT
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# JWT settings
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
}

# CORS –¥–ª—è frontend
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# Google OAuth (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)
GOOGLE_CLIENT_ID = os.environ.get('GOOGLE_CLIENT_ID', 'test-client-id')
GOOGLE_CLIENT_SECRET = os.environ.get('GOOGLE_CLIENT_SECRET', 'test-secret')
# –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
GOOGLE_OAUTH_CLIENT_ID = GOOGLE_CLIENT_ID
GOOGLE_OAUTH_CLIENT_SECRET = GOOGLE_CLIENT_SECRET
FRONTEND_URL = os.environ.get('FRONTEND_URL', 'https://workerproject-production.up.railway.app')

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–º–∏–Ω–∏–º—É–º)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# –ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ü–†–ò–û–†–ò–¢–ï–¢ SMTP > SendGrid API > Console/File
# –û—Ç–∫–ª—é—á–∞–µ–º SendGrid API –≤ –ø–æ–ª—å–∑—É SMTP relay
SENDGRID_API_KEY = None  # os.environ.get('SENDGRID_API_KEY')
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'mail.kabalod.online')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'False').lower() == 'true'

# –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è reg.ru —Ö–æ—Å—Ç–∏–Ω–≥–∞ (–∏–∑-–∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞)
import ssl
try:
    from django.core.mail.backends.smtp import EmailBackend
    original_open = EmailBackend.open
    
    def patched_open(self):
        if self.connection:
            return False
        try:
            self.connection = self.connection_class(
                self.host, self.port, timeout=self.timeout
            )
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è reg.ru
            if self.use_tls:
                # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                context = ssl.create_default_context()
                context.check_hostname = False
                context.verify_mode = ssl.CERT_NONE
                self.connection.starttls(context=context)
            if self.use_ssl:
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è SSL
                context = ssl.create_default_context()
                context.check_hostname = False
                context.verify_mode = ssl.CERT_NONE
                
            if self.username and self.password:
                self.connection.login(self.username, self.password)
            return True
        except Exception:
            if not self.fail_silently:
                raise
    
    EmailBackend.open = patched_open
    print("üìß SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è reg.ru —Ö–æ—Å—Ç–∏–Ω–≥–∞")
except Exception as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å SSL –ø—Ä–æ–≤–µ—Ä–∫—É: {e}")
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'noreply@kabalod.online')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'Dubai Real Estate <noreply@kabalod.online>')

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
IS_RAILWAY = os.environ.get('RAILWAY_ENVIRONMENT_NAME') is not None
IS_PRODUCTION = IS_RAILWAY or os.environ.get('NODE_ENV') == 'production'

# –í—ã–±–∏—Ä–∞–µ–º email backend –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
if EMAIL_HOST_PASSWORD and EMAIL_HOST == 'smtp.sendgrid.net':
    # SendGrid SMTP Relay - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    print(f"üìß –ù–ê–°–¢–†–û–ï–ù SendGrid SMTP Relay: {EMAIL_HOST}:{EMAIL_PORT}")
    print(f"üìß SMTP User: {EMAIL_HOST_USER}")
    
elif SENDGRID_API_KEY:
    # SendGrid API - –≤—Ç–æ—Ä–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    EMAIL_BACKEND = 'anymail.backends.sendgrid.EmailBackend'
    INSTALLED_APPS.append('anymail')
    
    ANYMAIL = {
        "SENDGRID_API_KEY": SENDGRID_API_KEY,
        "SENDGRID_GENERATE_MESSAGE_ID": True,
        "SENDGRID_MERGE_FIELD_FORMAT": "-{}-",
        "SENDGRID_API_URL": "https://api.sendgrid.com/v3/",
    }
    print(f"üìß –ù–ê–°–¢–†–û–ï–ù SendGrid API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö email")
    print(f"üìß SendGrid API Key: {SENDGRID_API_KEY[:20]}...")
    
elif EMAIL_HOST_PASSWORD:
    # SMTP - –≤—Ç–æ—Ä–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    print(f"üìß –ù–ê–°–¢–†–û–ï–ù SMTP: {EMAIL_HOST}:{EMAIL_PORT}")
    
elif not IS_PRODUCTION:
    # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - file backend  
    EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
    EMAIL_FILE_PATH = '/tmp/emails'
    print(f"üìß –ù–ê–°–¢–†–û–ï–ù file backend: {EMAIL_FILE_PATH}")
    
else:
    # Fallback –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    print(f"üìß –ù–ê–°–¢–†–û–ï–ù console backend (fallback)")

print(f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {'Railway' if IS_RAILWAY else 'Local'}")
print(f"üîß Email Backend: {EMAIL_BACKEND}")
print(f"üì® From Email: {DEFAULT_FROM_EMAIL}")