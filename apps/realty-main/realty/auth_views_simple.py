"""
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å SendGrid OTP
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ email —Å OTP –∫–æ–¥–∞–º–∏ –∏ Google OAuth
"""
import json
import os
import secrets
import requests
from urllib.parse import urlencode
from django.conf import settings
from django.contrib.auth import get_user_model
from django.http import JsonResponse, HttpResponseRedirect
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.core.mail import send_mail
from django.utils import timezone
from django.core.cache import cache
from django.db import transaction
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import RefreshToken

User = get_user_model()

# === CACHE KEYS ===
OTP_CACHE_KEY = "otp:{email}"
GOOGLE_STATE_CACHE_KEY = "google_state:{state}"

# === OTP STORAGE FUNCTIONS ===
def store_otp_data(email, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º OTP –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à —Å fallback –Ω–∞ —Å–µ—Å—Å–∏–∏"""
    cache_key = OTP_CACHE_KEY.format(email=email)
    try:
        cache.set(cache_key, data, timeout=600)
        print(f"‚úÖ OTP —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: {cache_key}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {e}")
        # Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            from django.contrib.sessions.models import Session
            from django.utils import timezone
            import json
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            from .models import OTPData
            OTPData.objects.update_or_create(
                email=email,
                defaults={
                    'data': json.dumps(data),
                    'expires_at': timezone.now() + timezone.timedelta(minutes=10)
                }
            )
            print(f"‚úÖ OTP —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –∫–∞–∫ fallback: {email}")
            return True
        except Exception as db_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_error}")
            return False

def get_otp_data(email):
    """–ü–æ–ª—É—á–∞–µ–º OTP –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ —Å fallback –Ω–∞ –ë–î"""
    cache_key = OTP_CACHE_KEY.format(email=email)
    try:
        data = cache.get(cache_key)
        if data:
            print(f"‚úÖ OTP –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: {cache_key}")
            return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: {e}")
    
    # Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        from .models import OTPData
        from django.utils import timezone
        import json
        
        otp_record = OTPData.objects.filter(
            email=email,
            expires_at__gt=timezone.now()
        ).first()
        
        if otp_record:
            data = json.loads(otp_record.data)
            print(f"‚úÖ OTP –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {email}")
            return data
    except Exception as db_error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –ë–î: {db_error}")
    
    print(f"‚ùå OTP –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {email}")
    return None

def delete_otp_data(email):
    """–£–¥–∞–ª—è–µ–º OTP –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –∏ –ë–î"""
    cache_key = OTP_CACHE_KEY.format(email=email)
    try:
        cache.delete(cache_key)
        print(f"‚úÖ OTP —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞: {cache_key}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: {e}")
    
    # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    try:
        from .models import OTPData
        OTPData.objects.filter(email=email).delete()
        print(f"‚úÖ OTP —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î: {email}")
    except Exception as db_error:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î: {db_error}")

# === HEALTH CHECK ===
@api_view(['GET'])
@permission_classes([AllowAny])
def health_check(request):
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return Response({
        'status': 'healthy',
        'timestamp': timezone.now().isoformat(),
        'email_backend': settings.EMAIL_BACKEND,
        'sendgrid_configured': hasattr(settings, 'ANYMAIL') and bool(settings.ANYMAIL.get('SENDGRID_API_KEY'))
    })

# === CSRF TOKEN ===
@api_view(['GET'])
@permission_classes([AllowAny])
def csrf_token_view(request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSRF —Ç–æ–∫–µ–Ω –¥–ª—è frontend"""
    from django.middleware.csrf import get_token
    return Response({'csrfToken': get_token(request)})

# === OTP FUNCTIONS ===

@api_view(['POST'])
@permission_classes([AllowAny])
@csrf_exempt
def send_otp(request):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ OTP –∫–æ–¥–∞ –Ω–∞ email"""
    email = request.data.get('email')
    if not email:
        return Response({'error': 'Email is required'}, status=400)
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OTP –∫–æ–¥
        otp_code = ''.join([str(secrets.randbelow(10)) for _ in range(6)])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cache –Ω–∞ 10 –º–∏–Ω—É—Ç
        cache_data = {
            'code': otp_code,
            'attempts': 0,
            'max_attempts': 3,
            'created_at': timezone.now().isoformat()
        }
        store_otp_data(email, cache_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        subject = 'Dubai Real Estate - Verification Code'
        message = f"""Hello!

Your verification code for Dubai Real Estate Platform is: {otp_code}

This code will expire in 10 minutes.

If you didn't request this code, please ignore this email.

Best regards,
Dubai Real Estate Team""".strip()
        
        email_sent = True
        try:
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            print(f"üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OTP email –Ω–∞ {email} —Å –∫–æ–¥–æ–º: {otp_code}")
            print(f"üìß From email: {settings.DEFAULT_FROM_EMAIL}")
            print(f"üìß Email backend: {settings.EMAIL_BACKEND}")
            
            if hasattr(settings, 'ANYMAIL') and settings.ANYMAIL.get('SENDGRID_API_KEY'):
                print(f"üìß SendGrid API Key: {settings.ANYMAIL['SENDGRID_API_KEY'][:20]}...")
            
            send_mail(
                subject=subject,
                message=message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[email],
                fail_silently=False,
            )
            print(f"‚úÖ OTP email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
            
        except Exception as e:
            email_sent = False
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP email: {e}")
            print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            
            if 'sendgrid' in str(e).lower() or 'forbidden' in str(e).lower():
                print("‚ùå –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã SendGrid –æ—à–∏–±–∫–∏:")
                print("   - –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
                print("   - From email –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ SendGrid")
                print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É API –∫–ª—é—á–∞")
        
        response_data = {
            'message': 'OTP code sent successfully',
            'email': email,
            'expires_in': 600,
            'email_sent': email_sent
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å OTP –∫–æ–¥
        is_production = os.environ.get('RAILWAY_ENVIRONMENT_NAME') is not None
        
        # –í DEBUG —Ä–µ–∂–∏–º–µ –∏–ª–∏ –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è file backend –¥–æ–±–∞–≤–ª—è–µ–º OTP –∫–æ–¥
        if settings.DEBUG and not is_production:
            response_data['otp_code'] = otp_code
            response_data['note'] = 'DEBUG: OTP code provided for testing'
        elif 'filebased' in settings.EMAIL_BACKEND:
            response_data['otp_code'] = otp_code
            response_data['note'] = 'Development: OTP code (check /tmp/emails/ for email content)'
        
        return Response(response_data)
        
    except Exception as e:
        return Response({
            'error': 'Failed to send OTP code',
            'details': str(e) if settings.DEBUG else 'Please try again later'
        }, status=500)

@api_view(['POST'])
@permission_classes([AllowAny])
@csrf_exempt
def verify_otp(request):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP –∫–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ/–≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    email = request.data.get('email')
    code = request.data.get('code')
    first_name = request.data.get('first_name', '')
    last_name = request.data.get('last_name', '')
    
    if not email or not code:
        return Response({
            'error': 'Email and code are required'
        }, status=400)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ cache
        print(f"üîç –ò—â–µ–º OTP –¥–ª—è: {email}")
        cache_data = get_otp_data(email)
        print(f"üîç –î–∞–Ω–Ω—ã–µ OTP: {cache_data}")
        
        if not cache_data:
            print(f"‚ùå OTP –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {email}")
            return Response({
                'error': 'No valid OTP code found for this email or code expired'
            }, status=400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏
        if cache_data['attempts'] >= cache_data['max_attempts']:
            delete_otp_data(email)
            return Response({
                'error': 'Too many failed attempts. Please request a new code.'
            }, status=400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        if cache_data['code'] != code:
            cache_data['attempts'] += 1
            store_otp_data(email, cache_data)
            return Response({
                'error': 'Invalid OTP code',
                'attempts_left': cache_data['max_attempts'] - cache_data['attempts']
            }, status=400)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞ –î–û —É–¥–∞–ª–µ–Ω–∏—è
        cached_password = cache_data.get('password')
        cached_first_name = cache_data.get('first_name', first_name)
        cached_last_name = cache_data.get('last_name', last_name)
        
        # –ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - —É–¥–∞–ª—è–µ–º –∏–∑ cache
        delete_otp_data(email)
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with transaction.atomic():
            user, created = User.objects.get_or_create(
                email=email,
                defaults={
                    'username': email,
                    'first_name': cached_first_name,
                    'last_name': cached_last_name,
                    'is_active': True,
                }
            )
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
            if created and cached_password:
                user.set_password(cached_password)  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ö–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                print(f"‚úÖ Password set for new user: {email}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ
            if cached_first_name and not user.first_name:
                user.first_name = cached_first_name
            if cached_last_name and not user.last_name:
                user.last_name = cached_last_name
            user.save()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω—ã
        refresh = RefreshToken.for_user(user)
        
        print(f"‚úÖ OTP –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è {email}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'—Å–æ–∑–¥–∞–Ω' if created else '–Ω–∞–π–¥–µ–Ω'}")
        
        return Response({
            'message': 'OTP verified successfully',
            'access': str(refresh.access_token),
            'refresh': str(refresh),
            'user': {
                'id': user.id,
                'email': user.email,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'is_active': user.is_active,
            }
        })
        
    except Exception as e:
        return Response({
            'error': 'OTP verification failed',
            'details': str(e) if settings.DEBUG else 'Please try again'
        }, status=500)

# === REGISTRATION ===
@api_view(['POST'])
@permission_classes([AllowAny])
@csrf_exempt
def register_user(request):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π OTP"""
    try:
        email = request.data.get('email')
        password = request.data.get('password')
        first_name = request.data.get('first_name', '')
        last_name = request.data.get('last_name', '')
        
        if not email:
            return Response({
                'error': 'Email is required',
                'message': 'Registration failed'
            }, status=400)
        
        if not password:
            return Response({
                'error': 'Password is required',
                'message': 'Registration failed'
            }, status=400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if User.objects.filter(email=email).exists():
            return Response({
                'error': 'User with this email already exists',
                'suggestion': 'Try logging in instead'
            }, status=400)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OTP –∫–æ–¥
        otp_code = ''.join([str(secrets.randbelow(10)) for _ in range(6)])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cache –Ω–∞ 10 –º–∏–Ω—É—Ç (–≤–∫–ª—é—á–∞—è –ø–∞—Ä–æ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        cache_data = {
            'code': otp_code,
            'password': password,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            'first_name': first_name,
            'last_name': last_name,
            'attempts': 0,
            'max_attempts': 3,
            'created_at': timezone.now().isoformat()
        }
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º OTP –¥–ª—è: {email}")
        print(f"üíæ –î–∞–Ω–Ω—ã–µ OTP: {cache_data}")
        store_otp_data(email, cache_data)
        print(f"‚úÖ OTP —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        email_sent = True
        email_error = None
        
        try:
            subject = 'Dubai Real Estate - Verification Code'
            message = f"""Hello{' ' + first_name if first_name else ''}!

Your verification code for Dubai Real Estate Platform is: {otp_code}

This code will expire in 10 minutes.

If you didn't request this code, please ignore this email.

Best regards,
Dubai Real Estate Team""".strip()
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print(f"üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –Ω–∞ {email} —Å OTP: {otp_code}")
            print(f"üìß From email: {settings.DEFAULT_FROM_EMAIL}")
            print(f"üìß Email backend: {settings.EMAIL_BACKEND}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SendGrid –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if hasattr(settings, 'ANYMAIL') and settings.ANYMAIL.get('SENDGRID_API_KEY'):
                print(f"üìß SendGrid API Key: {settings.ANYMAIL['SENDGRID_API_KEY'][:20]}...")
            
            send_mail(
                subject=subject,
                message=message,
                from_email=settings.DEFAULT_FROM_EMAIL,
                recipient_list=[email],
                fail_silently=False,
            )
            print(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è SendGrid –æ—à–∏–±–æ–∫
            if 'sendgrid' in str(e).lower() or 'forbidden' in str(e).lower():
                print("‚ùå –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã SendGrid –æ—à–∏–±–∫–∏:")
                print("   - –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
                print("   - From email –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ SendGrid")
                print("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É API –∫–ª—é—á–∞")
            
            email_sent = False
            email_error = str(e)
        
        response_data = {
            'message': 'Registration initiated. Please check your email for verification code.',
            'email': email,
            'email_sent': email_sent,
            'next_step': 'verify_otp',
            'expires_in': 600
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å OTP –∫–æ–¥
        is_production = os.environ.get('RAILWAY_ENVIRONMENT_NAME') is not None
        
        # –í DEBUG —Ä–µ–∂–∏–º–µ –∏–ª–∏ –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è file backend –¥–æ–±–∞–≤–ª—è–µ–º OTP –∫–æ–¥
        if settings.DEBUG and not is_production:
            response_data['otp_code'] = otp_code
            response_data['note'] = 'DEBUG: OTP code provided for testing'
        elif 'filebased' in settings.EMAIL_BACKEND:
            response_data['otp_code'] = otp_code
            response_data['note'] = 'Development: OTP code (check /tmp/emails/ for email content)'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –µ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        if email_error and not is_production:
            response_data['email_error'] = email_error
        
        return Response(response_data, status=201)
        
    except Exception as e:
        return Response({
            'error': 'Registration failed',
            'details': str(e) if settings.DEBUG else 'Please try again later'
        }, status=500)

# === GOOGLE OAUTH ===
@api_view(['GET'])
@permission_classes([AllowAny])
def google_auth_init(request):
    """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è Google OAuth"""
    try:
        state = secrets.token_urlsafe(32)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º state –≤ cache –Ω–∞ 10 –º–∏–Ω—É—Ç
        cache_key = GOOGLE_STATE_CACHE_KEY.format(state=state)
        cache.set(cache_key, {'created_at': timezone.now().isoformat()}, timeout=600)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        base_url = "https://accounts.google.com/o/oauth2/v2/auth"
        params = {
            'client_id': settings.GOOGLE_CLIENT_ID,
            'redirect_uri': os.environ.get('GOOGLE_OAUTH_REDIRECT_URI', 'http://localhost:8000/api/auth/google/callback'),
            'scope': 'openid email profile',
            'response_type': 'code',
            'state': state,
            'access_type': 'online',
            'prompt': 'select_account'
        }
        
        auth_url = f"{base_url}?{urlencode(params)}"
        
        return Response({
            'auth_url': auth_url,
            'state': state,
            'message': 'Redirect to auth_url to authenticate with Google'
        })
        
    except Exception as e:
        return Response({
            'error': 'Failed to initialize Google OAuth',
            'details': str(e) if settings.DEBUG else 'Please try again'
        }, status=500)

@csrf_exempt
@require_http_methods(["GET"])
def google_auth_callback(request):
    """Google OAuth callback"""
    code = request.GET.get('code')
    state = request.GET.get('state')
    error = request.GET.get('error')
    
    frontend_url = getattr(settings, 'FRONTEND_URL', 'http://localhost:3000')
    
    if error:
        return HttpResponseRedirect(f"{frontend_url}/auth?error={error}")
    
    if not code or not state:
        return HttpResponseRedirect(f"{frontend_url}/auth?error=missing_parameters")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º state
        cache_key = GOOGLE_STATE_CACHE_KEY.format(state=state)
        if not cache.get(cache_key):
            return HttpResponseRedirect(f"{frontend_url}/auth?error=invalid_state")
        
        # –£–¥–∞–ª—è–µ–º state –∏–∑ cache
        cache.delete(cache_key)
        
        # –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
        token_url = "https://oauth2.googleapis.com/token"
        token_data = {
            'client_id': settings.GOOGLE_CLIENT_ID,
            'client_secret': settings.GOOGLE_CLIENT_SECRET,
            'code': code,
            'grant_type': 'authorization_code',
            'redirect_uri': os.environ.get('GOOGLE_OAUTH_REDIRECT_URI', 'http://localhost:8000/api/auth/google/callback')
        }
        
        token_response = requests.post(token_url, data=token_data)
        token_response.raise_for_status()
        tokens = token_response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info_url = f"https://www.googleapis.com/oauth2/v2/userinfo?access_token={tokens['access_token']}"
        user_response = requests.get(user_info_url)
        user_response.raise_for_status()
        user_info = user_response.json()
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with transaction.atomic():
            user, created = User.objects.get_or_create(
                email=user_info['email'],
                defaults={
                    'username': user_info['email'],
                    'first_name': user_info.get('given_name', ''),
                    'last_name': user_info.get('family_name', ''),
                    'is_active': True,
                }
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω—ã
        refresh = RefreshToken.for_user(user)
        
        print(f"‚úÖ Google OAuth —É—Å–ø–µ—à–µ–Ω –¥–ª—è {user.email}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'—Å–æ–∑–¥–∞–Ω' if created else '–Ω–∞–π–¥–µ–Ω'}")
        
        # –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ hash (–∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
        redirect_url = f"{frontend_url}/auth#access={refresh.access_token}&refresh={refresh}&email={user.email}"
        return HttpResponseRedirect(redirect_url)
        
    except Exception as e:
        print(f"‚ùå Google OAuth –æ—à–∏–±–∫–∞: {e}")
        return HttpResponseRedirect(f"{frontend_url}/auth?error=oauth_failed")

# === SIMPLE LOGIN ===
@api_view(['POST'])
@permission_classes([AllowAny])
@csrf_exempt
def simple_login(request):
    """–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ä–æ–ª—è"""
    email = request.data.get('email')
    password = request.data.get('password')
    
    if not email:
        return Response({'error': 'Email is required'}, status=400)
    
    if not password:
        return Response({'error': 'Password is required'}, status=400)
    
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
        user = User.objects.get(email=email)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        if not user.check_password(password):
            return Response({
                'error': 'Invalid email or password',
                'message': 'Login failed'
            }, status=401)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
        if not user.is_active:
            return Response({
                'error': 'Account is disabled',
                'message': 'Login failed'
            }, status=401)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        refresh = RefreshToken.for_user(user)
        
        print(f"‚úÖ Successful login for: {email}")
        
        return Response({
            'message': 'Login successful',
            'access': str(refresh.access_token),
            'refresh': str(refresh),
            'user': {
                'id': user.id,
                'email': user.email,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'is_active': user.is_active,
            }
        })
        
    except User.DoesNotExist:
        return Response({
            'error': 'Invalid email or password',
            'message': 'Login failed'
        }, status=401)

# === MOCK DATA ===
@api_view(['GET'])
@permission_classes([AllowAny])
def mock_stats(request):
    """Mock —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    return Response({
        'total_properties': 12543,
        'average_price': 2850000,
        'growth_rate': 15.8
    })

@api_view(['GET'])
@permission_classes([AllowAny])
def mock_properties(request):
    """Mock –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"""
    limit = int(request.GET.get('limit', 10))
    properties = []
    for i in range(min(limit, 20)):
        properties.append({
            'id': i + 1,
            'title': f'Property {i + 1}',
            'price': 1500000 + i * 100000,
            'location': 'Dubai Marina',
            'type': 'apartment'
        })
    return Response({'results': properties})

